#!/bin/bash

# Utility to run cargo on source file changes
# Arguments are forwarded to the cargo.

if [ ! $# -eq 0 ]; then
	CARGO_ARGS=${*:1}
else
	CARGO_ARGS=$'build\ntest'
	echo "No arguments supplied, running build & test."
fi

# Source relative to $CARGO_ROOT
SOURCE_DIR="src"

# Allow running from a subdirectory
function find_cargo_root() {
	PARENT=""
	GRANDPARENT="../"
	unset CARGO_ROOT
	while [ ! -e "$GRANDPARENT/Cargo.toml" ] && [ "$GRANDPARENT" != "/" ] ; do
		PARENT=$GRANDPARENT
		GRANDPARENT="$(cd $PARENT/..; pwd)"
		# echo $GRANDPARENT
	done
	if [ ! -z "$GRANDPARENT" ] && [ "$GRANDPARENT" != "/" ] ; then
		CARGO_ROOT=$GRANDPARENT
	fi
	unset PARENT
	unset GRANDPARENT
}

if [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
	function watch_fs() {
		inotifywait \
			--quiet \
			--recursive "$SOURCE_DIR" \
			--exclude '/\..+' \
			--event modify \
			--event create \
			--event delete \
			--event move \
			--event close_write \
			|| true
	}
elif [ "$(uname)" == "Darwin" ]; then
	# Could use fswatch here?
	echo "TODO: macOS support"
	exit 1
else
	echo "TODO: unsupported platform"
	exit 1
fi

find_cargo_root
if [ -n "$CARGO_ROOT" ]; then
	cd "$CARGO_ROOT"
fi
unset CARGO_ROOT

if [ ! -d "$SOURCE_DIR" ]; then
	echo "Source directory: $SOURCE_DIR doesn't exist"
	exit 1
fi


echo "Watching \"$PWD/$SOURCE_DIR\", Hit Ctrl-C to stop."

# Generally useful
export RUST_BACKTRACE=1

# Allow multi-line input

# Monitor source, ignoring hidden files (autosave, vim swap etc)
while watch_fs; do
	# Reset terminal output.
	tput reset

	# Run cargo test and show any stdout

	IFS=$'\n'
	for ARG in $CARGO_ARGS ; do
		# Avoid blank lines
		if [ ! -z $ARG ]; then
			MSG="Running from \"$PWD\": cargo $ARG"
			LEN=${#MSG}
			eval "printf "%0.s-" {1..$LEN}"
			echo ""
			echo $MSG
			eval cargo $ARG
		fi
	done
	echo ""
	echo "*** Done! ***"

	# Set terminal title, alert on failure
	if [ ! $? -eq 0 ]; then
		# beep, on some systems makes terminal alert! (handy)
		echo -e "\a"
	fi
done

